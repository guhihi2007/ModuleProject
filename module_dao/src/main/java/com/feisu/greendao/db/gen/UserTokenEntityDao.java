package com.feisu.greendao.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.feisu.greendao.radio.UserTokenEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TOKEN_ENTITY".
*/
public class UserTokenEntityDao extends AbstractDao<UserTokenEntity, String> {

    public static final String TABLENAME = "USER_TOKEN_ENTITY";

    /**
     * Properties of entity UserTokenEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MAccessToken = new Property(0, String.class, "mAccessToken", false, "M_ACCESS_TOKEN");
        public final static Property MExpiresIn = new Property(1, Integer.class, "mExpiresIn", false, "M_EXPIRES_IN");
        public final static Property MRefreshToken = new Property(2, String.class, "mRefreshToken", false, "M_REFRESH_TOKEN");
        public final static Property MTokenType = new Property(3, String.class, "mTokenType", false, "M_TOKEN_TYPE");
        public final static Property MUserId = new Property(4, String.class, "mUserId", true, "M_USER_ID");
        public final static Property MExpiresTime = new Property(5, Long.class, "mExpiresTime", false, "M_EXPIRES_TIME");
    }


    public UserTokenEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserTokenEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TOKEN_ENTITY\" (" + //
                "\"M_ACCESS_TOKEN\" TEXT," + // 0: mAccessToken
                "\"M_EXPIRES_IN\" INTEGER," + // 1: mExpiresIn
                "\"M_REFRESH_TOKEN\" TEXT," + // 2: mRefreshToken
                "\"M_TOKEN_TYPE\" TEXT," + // 3: mTokenType
                "\"M_USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 4: mUserId
                "\"M_EXPIRES_TIME\" INTEGER);"); // 5: mExpiresTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TOKEN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTokenEntity entity) {
        stmt.clearBindings();
 
        String mAccessToken = entity.getMAccessToken();
        if (mAccessToken != null) {
            stmt.bindString(1, mAccessToken);
        }
 
        Integer mExpiresIn = entity.getMExpiresIn();
        if (mExpiresIn != null) {
            stmt.bindLong(2, mExpiresIn);
        }
 
        String mRefreshToken = entity.getMRefreshToken();
        if (mRefreshToken != null) {
            stmt.bindString(3, mRefreshToken);
        }
 
        String mTokenType = entity.getMTokenType();
        if (mTokenType != null) {
            stmt.bindString(4, mTokenType);
        }
 
        String mUserId = entity.getMUserId();
        if (mUserId != null) {
            stmt.bindString(5, mUserId);
        }
 
        Long mExpiresTime = entity.getMExpiresTime();
        if (mExpiresTime != null) {
            stmt.bindLong(6, mExpiresTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTokenEntity entity) {
        stmt.clearBindings();
 
        String mAccessToken = entity.getMAccessToken();
        if (mAccessToken != null) {
            stmt.bindString(1, mAccessToken);
        }
 
        Integer mExpiresIn = entity.getMExpiresIn();
        if (mExpiresIn != null) {
            stmt.bindLong(2, mExpiresIn);
        }
 
        String mRefreshToken = entity.getMRefreshToken();
        if (mRefreshToken != null) {
            stmt.bindString(3, mRefreshToken);
        }
 
        String mTokenType = entity.getMTokenType();
        if (mTokenType != null) {
            stmt.bindString(4, mTokenType);
        }
 
        String mUserId = entity.getMUserId();
        if (mUserId != null) {
            stmt.bindString(5, mUserId);
        }
 
        Long mExpiresTime = entity.getMExpiresTime();
        if (mExpiresTime != null) {
            stmt.bindLong(6, mExpiresTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public UserTokenEntity readEntity(Cursor cursor, int offset) {
        UserTokenEntity entity = new UserTokenEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mAccessToken
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // mExpiresIn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mRefreshToken
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mTokenType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mUserId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // mExpiresTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTokenEntity entity, int offset) {
        entity.setMAccessToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMExpiresIn(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMRefreshToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMTokenType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMExpiresTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserTokenEntity entity, long rowId) {
        return entity.getMUserId();
    }
    
    @Override
    public String getKey(UserTokenEntity entity) {
        if(entity != null) {
            return entity.getMUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTokenEntity entity) {
        return entity.getMUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
