package com.feisu.greendao.db.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.feisu.greendao.radio.CategoryBean;

import com.feisu.greendao.radio.RadioEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RADIO_ENTITY".
*/
public class RadioEntityDao extends AbstractDao<RadioEntity, Long> {

    public static final String TABLENAME = "RADIO_ENTITY";

    /**
     * Properties of entity RadioEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Small_thumb = new Property(3, String.class, "small_thumb", false, "SMALL_THUMB");
        public final static Property Popularity = new Property(4, long.class, "popularity", false, "POPULARITY");
        public final static Property Update_time = new Property(5, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Large_thumb = new Property(6, String.class, "large_thumb", false, "LARGE_THUMB");
        public final static Property Medium_thumb = new Property(7, String.class, "medium_thumb", false, "MEDIUM_THUMB");
        public final static Property ParentId = new Property(8, long.class, "parentId", false, "PARENT_ID");
        public final static Property Collected = new Property(9, boolean.class, "collected", false, "COLLECTED");
        public final static Property Heard = new Property(10, boolean.class, "heard", false, "HEARD");
        public final static Property HeardTime = new Property(11, long.class, "heardTime", false, "HEARD_TIME");
    }

    private DaoSession daoSession;

    private Query<RadioEntity> categoryBean_RadioListQuery;

    public RadioEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RadioEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RADIO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"SMALL_THUMB\" TEXT," + // 3: small_thumb
                "\"POPULARITY\" INTEGER NOT NULL ," + // 4: popularity
                "\"UPDATE_TIME\" TEXT," + // 5: update_time
                "\"LARGE_THUMB\" TEXT," + // 6: large_thumb
                "\"MEDIUM_THUMB\" TEXT," + // 7: medium_thumb
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 8: parentId
                "\"COLLECTED\" INTEGER NOT NULL ," + // 9: collected
                "\"HEARD\" INTEGER NOT NULL ," + // 10: heard
                "\"HEARD_TIME\" INTEGER NOT NULL );"); // 11: heardTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RADIO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RadioEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String small_thumb = entity.getSmall_thumb();
        if (small_thumb != null) {
            stmt.bindString(4, small_thumb);
        }
        stmt.bindLong(5, entity.getPopularity());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(6, update_time);
        }
 
        String large_thumb = entity.getLarge_thumb();
        if (large_thumb != null) {
            stmt.bindString(7, large_thumb);
        }
 
        String medium_thumb = entity.getMedium_thumb();
        if (medium_thumb != null) {
            stmt.bindString(8, medium_thumb);
        }
        stmt.bindLong(9, entity.getParentId());
        stmt.bindLong(10, entity.getCollected() ? 1L: 0L);
        stmt.bindLong(11, entity.getHeard() ? 1L: 0L);
        stmt.bindLong(12, entity.getHeardTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RadioEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String small_thumb = entity.getSmall_thumb();
        if (small_thumb != null) {
            stmt.bindString(4, small_thumb);
        }
        stmt.bindLong(5, entity.getPopularity());
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(6, update_time);
        }
 
        String large_thumb = entity.getLarge_thumb();
        if (large_thumb != null) {
            stmt.bindString(7, large_thumb);
        }
 
        String medium_thumb = entity.getMedium_thumb();
        if (medium_thumb != null) {
            stmt.bindString(8, medium_thumb);
        }
        stmt.bindLong(9, entity.getParentId());
        stmt.bindLong(10, entity.getCollected() ? 1L: 0L);
        stmt.bindLong(11, entity.getHeard() ? 1L: 0L);
        stmt.bindLong(12, entity.getHeardTime());
    }

    @Override
    protected final void attachEntity(RadioEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RadioEntity readEntity(Cursor cursor, int offset) {
        RadioEntity entity = new RadioEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // small_thumb
            cursor.getLong(offset + 4), // popularity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // update_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // large_thumb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // medium_thumb
            cursor.getLong(offset + 8), // parentId
            cursor.getShort(offset + 9) != 0, // collected
            cursor.getShort(offset + 10) != 0, // heard
            cursor.getLong(offset + 11) // heardTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RadioEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmall_thumb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPopularity(cursor.getLong(offset + 4));
        entity.setUpdate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLarge_thumb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMedium_thumb(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentId(cursor.getLong(offset + 8));
        entity.setCollected(cursor.getShort(offset + 9) != 0);
        entity.setHeard(cursor.getShort(offset + 10) != 0);
        entity.setHeardTime(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RadioEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RadioEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RadioEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "radioList" to-many relationship of CategoryBean. */
    public List<RadioEntity> _queryCategoryBean_RadioList(long parentId) {
        synchronized (this) {
            if (categoryBean_RadioListQuery == null) {
                QueryBuilder<RadioEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                categoryBean_RadioListQuery = queryBuilder.build();
            }
        }
        Query<RadioEntity> query = categoryBean_RadioListQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryBeanDao().getAllColumns());
            builder.append(" FROM RADIO_ENTITY T");
            builder.append(" LEFT JOIN CATEGORY_BEAN T0 ON T.\"PARENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RadioEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        RadioEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CategoryBean categoryBean = loadCurrentOther(daoSession.getCategoryBeanDao(), cursor, offset);
         if(categoryBean != null) {
            entity.setCategoryBean(categoryBean);
        }

        return entity;    
    }

    public RadioEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RadioEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RadioEntity> list = new ArrayList<RadioEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RadioEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RadioEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
