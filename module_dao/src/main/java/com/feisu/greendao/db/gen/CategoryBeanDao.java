package com.feisu.greendao.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.feisu.greendao.radio.CategoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY_BEAN".
*/
public class CategoryBeanDao extends AbstractDao<CategoryBean, Long> {

    public static final String TABLENAME = "CATEGORY_BEAN";

    /**
     * Properties of entity CategoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChannelId = new Property(0, long.class, "channelId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ResourceId = new Property(2, int.class, "resourceId", false, "RESOURCE_ID");
    }

    private DaoSession daoSession;


    public CategoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: channelId
                "\"TITLE\" TEXT," + // 1: title
                "\"RESOURCE_ID\" INTEGER NOT NULL );"); // 2: resourceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getChannelId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getResourceId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getChannelId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getResourceId());
    }

    @Override
    protected final void attachEntity(CategoryBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CategoryBean readEntity(Cursor cursor, int offset) {
        CategoryBean entity = new CategoryBean( //
            cursor.getLong(offset + 0), // channelId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getInt(offset + 2) // resourceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoryBean entity, int offset) {
        entity.setChannelId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResourceId(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoryBean entity, long rowId) {
        entity.setChannelId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoryBean entity) {
        if(entity != null) {
            return entity.getChannelId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoryBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
